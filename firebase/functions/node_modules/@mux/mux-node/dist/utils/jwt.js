"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/jwt.ts
var jwt_exports = {};
__export(jwt_exports, {
  DataTypeClaim: () => DataTypeClaim,
  JWT: () => JWT,
  TypeClaim: () => TypeClaim
});
module.exports = __toCommonJS(jwt_exports);
var import_fs = __toESM(require("fs"));
var import_jsonwebtoken = __toESM(require("jsonwebtoken"));
var TypeClaim = /* @__PURE__ */ ((TypeClaim2) => {
  TypeClaim2["video"] = "v";
  TypeClaim2["thumbnail"] = "t";
  TypeClaim2["gif"] = "g";
  TypeClaim2["storyboard"] = "s";
  TypeClaim2["stats"] = "playback_id";
  return TypeClaim2;
})(TypeClaim || {});
var DataTypeClaim = /* @__PURE__ */ ((DataTypeClaim2) => {
  DataTypeClaim2["video"] = "video_id";
  DataTypeClaim2["asset"] = "asset_id";
  DataTypeClaim2["playback"] = "playback_id";
  DataTypeClaim2["live_stream"] = "livestream_id";
  return DataTypeClaim2;
})(DataTypeClaim || {});
var getSigningKey = (options) => {
  const keyId = options.keyId || process.env.MUX_SIGNING_KEY;
  if (!keyId) {
    throw new TypeError("Signing Key ID required");
  }
  return keyId;
};
var getPrivateKey = (options) => {
  let key;
  if (options.keySecret) {
    key = options.keySecret;
  } else if (options.keyFilePath) {
    key = import_fs.default.readFileSync(options.keyFilePath);
  } else if (process.env.MUX_PRIVATE_KEY) {
    key = Buffer.from(process.env.MUX_PRIVATE_KEY, "base64");
  }
  if (Buffer.isBuffer(key)) {
    return key;
  }
  if (key) {
    const [rsaHeader] = key.toString().split("\n");
    if (rsaHeader === "-----BEGIN RSA PRIVATE KEY-----") {
      return key;
    }
    try {
      return Buffer.from(key, "base64");
    } catch (err) {
      throw new TypeError(
        "Specified signing key must be either a valid PEM string or a base64 encoded PEM."
      );
    }
  }
  throw new TypeError("Signing Key ID required");
};
var JWT = class {
  /**
   * Creates a new token to be used with a signed playback ID
   * @param {string} playbackId - The Playback ID (of type 'signed') that you'd like to generate a token for.
   * @param {Object} options - Configuration options to use when creating the token
   * @param {string} [options.keyId] - The signing key ID to use. If not specified, process.env.MUX_SIGNING_KEY is attempted
   * @param {string} [options.keySecret] - The signing key secret. If not specified, process.env.MUX_PRIVATE_KEY is used.
   * @param {string} [options.type=video] - Type of token this will be. Valid types are `video`, `thumbnail`, `gif`, `storyboard` or `stats`
   * @param {string} [options.expiration=7d] - Length of time for the token to be valid.
   * @param {Object} [options.params] - Any additional query params you'd use with a public url. For example, with a thumbnail this would be values such as `time`.
   * @returns {string} - Returns a token to be used with a signed URL.
   *
   * @example
   * const Mux = require('@mux/mux-node');
   *
   * const token = Mux.JWT.sign('some-playback-id', { keyId: 'your key id', keySecret: 'your key secret' });
   * // Now you can use the token in a url: `https://stream.mux.com/some-playback-id.m3u8?token=${token}`
   *
   * @deprecated This method should not be used, you should use signPlaybackId instead
   */
  static sign(playbackId, options = {}) {
    process.emitWarning(
      "The JWT.sign() method has been deprecated, please use JWT.signPlaybackId() instead",
      "DeprecatedWarning"
    );
    return this.signPlaybackId(playbackId, options);
  }
  /**
   * Creates a new token to be used with a signed playback ID
   * @param {string} playbackId - The Playback ID (of type 'signed') that you'd like to generate a token for.
   * @param {Object} options - Configuration options to use when creating the token
   * @param {string} [options.keyId] - The signing key ID to use. If not specified, process.env.MUX_SIGNING_KEY is attempted
   * @param {string} [options.keySecret] - The signing key secret. If not specified, process.env.MUX_PRIVATE_KEY is used.
   * @param {string} [options.type=video] - Type of token this will be. Valid types are `video`, `thumbnail`, `gif`, `storyboard` or `stats`
   * @param {string} [options.expiration=7d] - Length of time for the token to be valid.
   * @param {Object} [options.params] - Any additional query params you'd use with a public url. For example, with a thumbnail this would be values such as `time`.
   * @returns {string} - Returns a token to be used with a signed URL.
   *
   * @example
   * const Mux = require('@mux/mux-node');
   *
   * const token = Mux.JWT.signPlaybackId('some-playback-id', { keyId: 'your key id', keySecret: 'your key secret' });
   * // Now you can use the token in a url: `https://stream.mux.com/some-playback-id.m3u8?token=${token}`
   */
  static signPlaybackId(playbackId, options = {}) {
    const opts = {
      type: "video",
      expiration: "7d",
      params: {},
      ...options
    };
    const keyId = getSigningKey(options);
    const keySecret = getPrivateKey(options);
    const typeClaim = TypeClaim[opts.type];
    if (!typeClaim) {
      throw new Error(`Invalid signature type: ${opts.type}`);
    }
    const tokenOptions = {
      keyid: keyId,
      subject: playbackId,
      audience: typeClaim,
      expiresIn: opts.expiration,
      noTimestamp: true,
      algorithm: "RS256"
    };
    return import_jsonwebtoken.default.sign(opts.params, keySecret, tokenOptions);
  }
  /**
   * Creates a new token to be used with a signed Space ID
   * @param {string} spaceId - The Space ID (of type 'signed') that you'd like to generate a token for.
   * @param {Object} options - Configuration options to use when creating the token
   * @param {string} [options.keyId] - The signing key ID to use. If not specified, process.env.MUX_SIGNING_KEY is attempted
   * @param {string} [options.keySecret] - The signing key secret. If not specified, process.env.MUX_PRIVATE_KEY is used.
   * @param {string} [options.expiration=7d] - Length of time for the token to be valid.
   * @param {Object} [options.params] - Any additional query params you'd use with a public url.
   * @returns {string} - Returns a token to be used with a signed URL.
   *
   * @example
   * const Mux = require('@mux/mux-node');
   *
   * const token = Mux.JWT.signSpaceId('some-space-id', { keyId: 'your key id', keySecret: 'your key secret' });
   */
  static signSpaceId(spaceId, options = {}) {
    const opts = {
      expiration: "7d",
      params: {},
      ...options
    };
    const keyId = getSigningKey(options);
    const keySecret = getPrivateKey(options);
    const tokenOptions = {
      keyid: keyId,
      subject: spaceId,
      audience: "rt",
      expiresIn: opts.expiration,
      noTimestamp: true,
      algorithm: "RS256"
    };
    if (!spaceId) {
      throw new TypeError("A valid Space ID is required");
    }
    return import_jsonwebtoken.default.sign(opts.params, keySecret, tokenOptions);
  }
  /**
   * Creates a new token to be used with a signed statistics request
   * @param {string} Id - The ID of the object that you'd like to generate a token for
   * @param {Object} options - Configuration options to use when creating the token
   * @param {string} [options.keyId] - The signing key ID to use. If not specified, process.env.MUX_SIGNING_KEY is attempted
   * @param {string} [options.keySecret] - The signing key secret. If not specified, process.env.MUX_PRIVATE_KEY is used.
   * @param {string} [options.type=video] - Type of token this will be. Valid types are `video`, `asset`, `playback`, or `live_stream`
   * @param {string} [options.expiration=7d] - Length of time for the token to be valid.
   * @param {Object} [options.params] - Any additional query params you'd use with a public url. For example, with a thumbnail this would be values such as `time`.
   * @returns {string} - Returns a token to be used with a viewer count URL.
   *
   * @example
   * const Mux = require('@mux/mux-node');
   *
   * const token = Mux.JWT.signViewerCounts('some-id', { type: 'video', keyId: 'your key id', keySecret: 'your key secret' });
   * // Now you can use the token in a url: `https://stats.mux.com/counts?token=${token}`
   */
  static signViewerCounts(Id, options = {}) {
    const opts = {
      type: "video",
      expiration: "7d",
      params: {},
      ...options
    };
    const keyId = getSigningKey(options);
    const keySecret = getPrivateKey(options);
    const typeClaim = DataTypeClaim[opts.type];
    if (!typeClaim) {
      throw new Error(`Invalid signature type: ${opts.type}`);
    }
    const tokenOptions = {
      keyid: keyId,
      subject: Id,
      audience: typeClaim,
      expiresIn: opts.expiration,
      noTimestamp: true,
      algorithm: "RS256"
    };
    return import_jsonwebtoken.default.sign(opts.params, keySecret, tokenOptions);
  }
  /**
   * Decodes an existing token.
   *
   * Note: This does not cryptographically verify the token signature, it simply decodes the values.
   * @param {string} token - The token you'd like to decode.
   * @returns {Object} - If the token could be decoded, it returns the decoded token object
   *
   * @example
   * const Mux = require('@mux/mux-node');
   *
   * const token = Mux.JWT.sign('some-playback-id', { keyId: 'your key id', keySecret: 'your key secret' });
   * const decoded = Mux.JWT.decode(token);
   * // decoded will be the raw decoded JWT, so you'll see keys like `aud`, `exp`, etc.
   */
  static decode(token) {
    return import_jsonwebtoken.default.decode(token);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DataTypeClaim,
  JWT,
  TypeClaim
});
/*!
 * JWT - Signed URL Helpers
 * Note: Hacking this module into a class with static methods because ESDoc forces it. We'll revisit ESDoc later.
 * Documentationjs looks real nice.
 */
module.exports = module.exports.default || module.exports;
//# sourceMappingURL=jwt.js.map