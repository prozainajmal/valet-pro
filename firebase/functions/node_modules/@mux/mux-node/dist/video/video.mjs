// src/base.ts
import Axios from "axios";
import EventEmitter from "events";

// src/version.ts
var VERSION = "7.3.5";

// src/base.ts
var Base = class extends EventEmitter {
  constructor(tokenIdOrOptionsOrBase, tokenSecret, config) {
    var _a, _b, _c, _d, _e, _f, _g;
    super();
    if (tokenIdOrOptionsOrBase instanceof Base) {
      this.config = tokenIdOrOptionsOrBase._config;
      this._tokenId = tokenIdOrOptionsOrBase._tokenId;
      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;
      this.http = tokenIdOrOptionsOrBase.http;
    } else {
      if (typeof tokenIdOrOptionsOrBase === "object" && !(tokenIdOrOptionsOrBase instanceof Base)) {
        this.config = tokenIdOrOptionsOrBase;
        this.tokenId = void 0;
        this.tokenSecret = void 0;
      } else {
        this.tokenId = tokenIdOrOptionsOrBase;
        this.tokenSecret = tokenSecret;
        this.config = config ?? {};
      }
      const request = {
        baseURL: this.config.baseUrl,
        headers: {
          "User-Agent": `Mux Node | ${VERSION}`,
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        withCredentials: false,
        auth: {
          username: this._tokenId,
          password: this._tokenSecret
        }
      };
      if ((_a = this.config.platform) == null ? void 0 : _a.name) {
        if ((_c = (_b = this.config.platform) == null ? void 0 : _b.name) == null ? void 0 : _c.includes("|")) {
          throw new Error('Platform name cannot contain a "|" value.');
        }
        if ((_e = (_d = this.config.platform) == null ? void 0 : _d.version) == null ? void 0 : _e.includes("|")) {
          throw new Error('Platform version cannot contain a "|" value.');
        }
        request.headers["x-source-platform"] = `${(_f = this.config.platform) == null ? void 0 : _f.name} | ${(_g = this.config.platform) == null ? void 0 : _g.version}`;
      }
      this.http = Axios.create(request);
      this.http.interceptors.request.use((req) => {
        this.emit("request", req);
        return req;
      });
      this.http.interceptors.response.use(
        (res) => {
          this.emit("response", res);
          if (res.config.url && this.isVideoUrl(res.config.url)) {
            return res.data && res.data.data;
          }
          return res.data;
        },
        (errorRes) => Promise.reject(
          errorRes.response && errorRes.response.data.error || errorRes
        )
      );
    }
  }
  // eslint-disable-next-line class-methods-use-this
  isVideoUrl(url) {
    return url.startsWith(`/video/v1/`);
  }
  set config(options) {
    this._config = {
      baseUrl: "https://api.mux.com",
      ...options
    };
  }
  get config() {
    return this._config;
  }
  set tokenId(token) {
    const v = token || process.env.MUX_TOKEN_ID;
    if (!v || v.length === 0) {
      throw new Error("API Access Token must be provided.");
    }
    this._tokenId = v;
  }
  get tokenId() {
    return this._tokenId;
  }
  set tokenSecret(secret) {
    const v = secret || process.env.MUX_TOKEN_SECRET;
    if (!v || v.length === 0) {
      throw new Error("API secret key must be provided");
    }
    this._tokenSecret = v;
  }
  get tokenSecret() {
    return this._tokenSecret;
  }
};

// src/video/resources/assets.ts
var PATH = "/video/v1/assets";
var buildBasePath = (assetId) => `${PATH}/${assetId}`;
var Assets = class extends Base {
  /**
   * Creates a Mux asset with the specified JSON parameters
   * @param {Object} params - Asset JSON parameters (e.g input)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Create an asset
   * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});
   *
   * @see https://docs.mux.com/api-reference/video#operation/create-asset
   */
  create(params) {
    if (!params) {
      return Promise.reject(
        new Error("Params are required for creating an asset")
      );
    }
    return this.http.post(PATH, params);
  }
  /**
   * Updates an existing asset with new parameters.
   *
   * @param {string} assetId - the ID of the asset
   * @param {Object} params - Asset JSON parameters (e.g passthrough)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   */
  async update(assetId, params) {
    if (!assetId || !params) {
      throw new Error("assetId and params are required.");
    }
    return this.http.patch(buildBasePath(assetId), params);
  }
  /**
   * Deletes a Mux asset
   * @param {string} assetId - The ID for the asset intended for deletion
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Delete an asset
   * Video.Assets.del(assetId);
   *
   * @see hhttps://docs.mux.com/api-reference/video#operation/delete-asset
   */
  del(assetId) {
    if (!assetId) {
      return Promise.reject(
        new Error("An asset ID is required to delete an asset")
      );
    }
    return this.http.delete(buildBasePath(assetId));
  }
  /**
   * Get an asset
   * @param {string} assetId - The ID for the asset
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Get an asset
   * Video.Assets.get(assetId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/get-asset
   */
  get(assetId) {
    if (!assetId) {
      return Promise.reject(
        new Error("An asset ID is required to get an asset")
      );
    }
    return this.http.get(buildBasePath(assetId));
  }
  /**
   * Get input info for an asset
   * @param {string} assetId - The ID for the asset
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Get input info for an asset
   * Video.Assets.inputInfo(assetId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/get-asset-input-info
   */
  inputInfo(assetId) {
    if (!assetId) {
      return Promise.reject(
        new Error("An asset ID is required to get input-info")
      );
    }
    return this.http.get(`${buildBasePath(assetId)}/input-info`);
  }
  /**
   * List all assets for a Mux Environment (tied to your access token)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // List all assets for a Mux Environment
   * Video.Assets.list();
   *
   * @see https://docs.mux.com/api-reference/video#operation/list-assets
   */
  list(params) {
    return this.http.get(PATH, { params });
  }
  /**
   * Return an asset playback id
   * @param {string} assetId - The ID for the asset
   * @param {string} playbackId - The ID for the playbackId
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Retrieve an asset playbackId
   * Video.Assets.playbackId(assetId, playbackId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/get-asset-playback-id
   */
  playbackId(assetId, playbackId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!playbackId) {
      return Promise.reject(new Error("A playback ID is required"));
    }
    return this.http.get(
      `${buildBasePath(assetId)}/playback-ids/${playbackId}`
    );
  }
  /**
   * Create an asset playback id
   * @param {string} assetId - The ID for the asset
   * @param {Object} params - Asset JSON parameters (e.g playback_policy)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Create an asset playback ID
   * Video.Assets.createPlaybackId(assetId, { policy: 'public' });
   *
   * @see https://docs.mux.com/api-reference/video#operation/create-asset-playback-id
   */
  createPlaybackId(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!params) {
      return Promise.reject(new Error("Playback ID params are required"));
    }
    return this.http.post(`${buildBasePath(assetId)}/playback-ids`, params);
  }
  /**
   * Delete an asset playback ID
   * @param {string} assetId - The ID for the asset
   * @param {string} playbackId - The ID for the asset playback ID to delete
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Delete an asset playback ID
   * Video.Assets.deletePlaybackId(assetId, { policy: 'public' });
   *
   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-playback-id
   */
  deletePlaybackId(assetId, playbackId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!playbackId) {
      return Promise.reject(new Error("A playback ID is required"));
    }
    return this.http.delete(
      `${buildBasePath(assetId)}/playback-ids/${playbackId}`
    );
  }
  /**
   * Create a subtitle text track
   * @param {string} assetId - The ID for the asset
   * @param {Object} params - subtitle text track JSON parameters
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Create an asset text track
   * Video.Assets.createTrack(assetId, {
   *   url: "https://example.com/myVIdeo_en.srt",
   *   type: "text",
   *   text_type: "subtitles",
   *   language_code: "en-US",
   * });
   *
   * @see https://docs.mux.com/api-reference/video#operation/create-asset-track
   */
  createTrack(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!params) {
      return Promise.reject(new Error("Track params are required"));
    }
    return this.http.post(`${buildBasePath(assetId)}/tracks`, params);
  }
  /**
   * Delete an asset text track
   * @param {string} assetId - The ID for the asset
   * @param {string} trackId - The ID for the asset text track to delete
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Delete an asset text track
   * Video.Assets.deleteTrack(assetId, trackId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-track
   */
  deleteTrack(assetId, trackId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!trackId) {
      return Promise.reject(new Error("A track ID is required"));
    }
    return this.http.delete(`${buildBasePath(assetId)}/tracks/${trackId}`);
  }
  /**
   * Update mp4 support for an asset
   * @param {Object} params - mp4 support JSON parameters
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Updates mp4 support for an asset
   * Video.Assets.updateMp4Support(assetId, {mp4_support: "standard"});
   *
   * @see https://docs.mux.com/api-reference/video#operation/update-asset-mp4-support
   */
  updateMp4Support(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!(params && params.mp4_support)) {
      return Promise.reject(new Error("params.mp4_support is required"));
    }
    return this.http.put(`${buildBasePath(assetId)}/mp4-support`, params);
  }
  /**
   * Update master access for an asset
   * @param {Object} params - master access JSON parameters
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Update master access for an asset
   * Video.Assets.updateMasterAccess(assetId, {master_access: "temporary"});
   *
   * @see https://docs.mux.com/api-reference/video#operation/update-asset-master-access
   */
  updateMasterAccess(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!(params && params.master_access)) {
      return Promise.reject(new Error("params.master_access is required"));
    }
    return this.http.put(`${buildBasePath(assetId)}/master-access`, params);
  }
};

// src/video/resources/liveStreams.ts
var PATH2 = "/video/v1/live-streams";
var buildBasePath2 = (liveStreamId) => `${PATH2}/${liveStreamId}`;
var LiveStreams = class extends Base {
  /**
   * Creates a Mux live stream with the specified JSON parameters
   * @param {Object} params - Live Stream JSON parameters
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const muxClient = new Mux(accessToken, secret);
   * const { Video } = muxClient;
   *
   * // Create a live stream
   * Video.LiveStreams.create({
   *  playback_policy: 'public',
   *  new_asset_settings: { playback_policy: 'public' }
   * });
   *
   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream
   */
  create(params) {
    return this.http.post(PATH2, params);
  }
  /**
   * Updates an existing livestream with new parameters.
   *
   * @param {string} liveStreamId - the ID of the live stream
   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   */
  async update(liveStreamId, params) {
    if (!liveStreamId || !params) {
      throw new Error("assetId and params are required.");
    }
    return this.http.patch(buildBasePath2(liveStreamId), params);
  }
  /**
   * Deletes a Mux Live Stream
   * @param {string} liveStreamId - The ID for the live stream intended for deletion
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Delete a mux live stream
   * Video.LiveStreams.del(liveStreamId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream
   */
  del(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error("A live stream ID is required to delete a live stream")
      );
    }
    return this.http.delete(buildBasePath2(liveStreamId));
  }
  /**
   * Get an Live Stream
   * @param {string} liveStreamId - The ID for the live stream
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Get a live stream
   * Video.LiveStreams.get(liveStreamId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream
   */
  get(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error("A live stream ID is required to get a live stream")
      );
    }
    return this.http.get(buildBasePath2(liveStreamId));
  }
  /**
   * List all live streams for a Mux Environment (tied to your access token)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // List all live streams for a Mux Environment
   * Video.LiveStreams.list();
   *
   * @see https://docs.mux.com/api-reference/video#operation/list-live-streams
   */
  list(params) {
    return this.http.get(PATH2, { params });
  }
  /**
   * Signal a live stream is finished
   * @param {string} liveStreamId - The ID for the live stream
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Signal a live stream is finished
   * Video.LiveStreams.signalComplete(liveStreamId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/signal-live-stream-complete
   */
  signalComplete(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error("A live stream ID is required to signal a stream is complete")
      );
    }
    return this.http.put(`${buildBasePath2(liveStreamId)}/complete`);
  }
  /**
   * Reset a stream key
   * @param {string} liveStreamId - The ID for the live stream
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Reset a live stream key if you want to immediately stop the current stream key
   * // from working and create a new stream key that can be used for future broadcasts.
   * Video.LiveStreams.resetStreamKey(liveStreamId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/reset-stream-key
   */
  resetStreamKey(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error("A live stream ID is required to reset a live stream key")
      );
    }
    return this.http.post(`${buildBasePath2(liveStreamId)}/reset-stream-key`);
  }
  /**
   * Create a live stream playback id
   * @param {string} liveStreamId - The ID for the live stream
   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Create a live stream playback ID
   * Video.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });
   *
   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-playback-id
   */
  createPlaybackId(liveStreamId, params) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error(
          "A live stream ID is required to create a live stream playback ID"
        )
      );
    }
    if (!params) {
      return Promise.reject(
        new Error(
          "A playback policy is required to create a live stream playback ID"
        )
      );
    }
    return this.http.post(
      `${buildBasePath2(liveStreamId)}/playback-ids`,
      params
    );
  }
  /**
   * Delete a live stream playback ID
   * @param {string} liveStreamId - The ID for the live stream
   * @param {string} playbackId - The ID for the live stream playback ID to delete
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Delete a live stream playback ID
   * Video.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });
   *
   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-playback-id
   */
  deletePlaybackId(liveStreamId, playbackId) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error(
          "A live stream ID is required to delete a live stream playback ID"
        )
      );
    }
    if (!playbackId) {
      return Promise.reject(
        new Error(
          "A live stream playback ID is required to delete a live stream playback ID"
        )
      );
    }
    return this.http.delete(
      `${buildBasePath2(liveStreamId)}/playback-ids/${playbackId}`
    );
  }
  /**
   * Return a live stream playback id
   * @param {string} liveStreamId - The ID for the live stream
   * @param {string} playbackId - The ID for the playbackId
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @see https://docs.mux.com/api-reference/video#operation/get-asset-playback-id
   */
  playbackId(liveStreamId, playbackId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required"));
    }
    if (!playbackId) {
      return Promise.reject(new Error("A playback ID is required"));
    }
    return this.http.get(
      `${buildBasePath2(liveStreamId)}/playback-ids/${playbackId}`
    );
  }
  /**
   * Create a simulcast target
   * @param {string} liveStreamId - The ID for the live stream
   * @param {Object} params - Simulcast Target JSON parameters (e.g url and stream_key)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Create a live simulcast target
   * Video.LiveStreams.createSimulcastTarget(liveStreamId, {url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi', passthrough: 'Example Live Streaming service'});
   *
   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-simulcast-target
   */
  createSimulcastTarget(liveStreamId, params) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error("A live stream ID is required to create a simulcast target")
      );
    }
    if (!(params && params.url)) {
      return Promise.reject(
        new Error("A url is required to create a simulcast target")
      );
    }
    return this.http.post(
      `${buildBasePath2(liveStreamId)}/simulcast-targets`,
      params
    );
  }
  /**
   * Get a simulcast target
   * @param {string} liveStreamId - The ID for the live stream
   * @param {string} simulcastTargetId - The ID for the simulcast target to delete
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Get a live simulcast target
   * Video.LiveStreams.getSimulcastTarget(liveStreamId, simulcastTargetId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream-simulcast-target
   */
  getSimulcastTarget(liveStreamId, simulcastTargetId) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error("A live stream ID is required to get a simulcast target")
      );
    }
    if (!simulcastTargetId) {
      return Promise.reject(
        new Error("A simulcast target ID is required to get a simulcast target")
      );
    }
    return this.http.get(
      `${buildBasePath2(liveStreamId)}/simulcast-targets/${simulcastTargetId}`
    );
  }
  /**
   * Delete a simulcast target
   * @param {string} liveStreamId - The ID for the live stream
   * @param {string} simulcastTargetId - The ID for the simulcast target to delete
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Delete a simulcast target
   * Video.LiveStreams.deleteSimulcastTarget(liveStreamId, simulcastTargetId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-simulcast-target
   */
  deleteSimulcastTarget(liveStreamId, simulcastTargetId) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error("A live stream ID is required to delete a simulcast target")
      );
    }
    if (!simulcastTargetId) {
      return Promise.reject(
        new Error(
          "A simulcast target ID is required to delete a simulcast target"
        )
      );
    }
    return this.http.delete(
      `${buildBasePath2(liveStreamId)}/simulcast-targets/${simulcastTargetId}`
    );
  }
  /**
   * Configures a live stream to receive embedded closed captions.
   * The resulting Asset's subtitle text track will have `closed_captions: true` set.
   * @param {string} liveStreamId - The ID for the live stream
   * @param {string} params - Embedded subtitles parameters.
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   */
  async updateEmbeddedSubtitles(liveStreamId, params) {
    if (!liveStreamId || !params) {
      throw new Error("liveStreamId and params are required.");
    }
    return this.http.put(
      `${buildBasePath2(liveStreamId)}/embedded-subtitles`,
      params
    );
  }
  /**
   * Configures a live stream to receive generated closed captions.
   * @param {string} liveStreamId - The ID for the live stream
   * @param {string} params - Generated subtitles parameters.
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   */
  async updateGeneratedSubtitles(liveStreamId, params) {
    if (!liveStreamId || !params) {
      throw new Error("liveStreamId and params are required.");
    }
    return this.http.put(
      `${buildBasePath2(liveStreamId)}/generated-subtitles`,
      params
    );
  }
  /**
   * Disable a Live Stream
   * @param {string} liveStreamId - The ID for the live stream
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Disable a live stream
   * Video.LiveStreams.disable(liveStreamId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/disable-live-stream
   */
  disable(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error("A live stream ID is required to disable a live stream")
      );
    }
    return this.http.put(`${buildBasePath2(liveStreamId)}/disable`);
  }
  /**
   * Enable a Live Stream
   * @param {string} liveStreamId - The ID for the live stream
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Enable a Live Stream
   * Video.LiveStreams.enable(liveStreamId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/enable-live-stream
   */
  enable(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(
        new Error("A live stream ID is required to enable a live stream")
      );
    }
    return this.http.put(`${buildBasePath2(liveStreamId)}/enable`);
  }
};

// src/video/resources/playbackIds.ts
var PATH3 = "/video/v1/playback-ids";
var buildBasePath3 = (playbackId) => `${PATH3}/${playbackId}`;
var PlaybackIds = class extends Base {
  /**
   * Retrieve an Asset or Live Stream  identifier associated with a Playback ID
   * @param {string} playbackId - The ID for playback
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Retrieve an Asset or Live Stream identifier associated with a Playback ID
   * Video.PlaybackIds.get(playbackId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/get-asset-or-livestream-id
   */
  get(playbackId) {
    if (!playbackId) {
      return Promise.reject(
        new Error(
          "An playback ID is required to get an asset or live stream identifier"
        )
      );
    }
    return this.http.get(buildBasePath3(playbackId));
  }
};

// src/video/resources/uploads.ts
var PATH4 = "/video/v1/uploads";
var buildBasePath4 = (uploadId) => `${PATH4}/${uploadId}`;
var Uploads = class extends Base {
  /**
   * Creates a direct upload with the specified JSON parameters
   * @extends Base
   * @param {Object} params - Upload JSON parameters (e.g timeout)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const muxClient = new Mux(accessToken, secret);
   * const { Video } = muxClient;
   *
   * // Create a new upload
   * const upload = await Video.Uploads.create({new_asset_settings: {playback_policy: 'public'}});
   * // Now push a file to the URL returned.
   * fs.createReadStream(pathToFile).pipe(request.put(upload.url))
   *
   * @see https://docs.mux.com/api-reference/video#operation/create-direct-upload
   */
  create(params) {
    if (!params) {
      return Promise.reject(
        new Error("Params are required for creating a direct upload")
      );
    }
    return this.http.post(PATH4, params);
  }
  /**
   * Cancels an upload
   * @param {string} uploadId - The ID for the upload intended for cancellation
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Cancels an upload
   * Video.Uploads.cancel(uploadId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/cancel-direct-upload
   */
  cancel(uploadId) {
    if (!uploadId) {
      return Promise.reject(new Error("An upload ID is required"));
    }
    return this.http.put(`${buildBasePath4(uploadId)}/cancel`);
  }
  /**
   * Get an upload
   * @param {string} uploadId - The ID for the upload
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Get an upload
   * Video.Uploads.get(uploadId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/get-direct-upload
   */
  get(uploadId) {
    if (!uploadId) {
      return Promise.reject(
        new Error("An upload ID is required to get an asset")
      );
    }
    return this.http.get(buildBasePath4(uploadId));
  }
  /**
   * List all uploads
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // List all uploads
   * Video.Uploads.list();
   *
   * @see https://docs.mux.com/api-reference/video#operation/list-direct-uploads
   */
  list(params) {
    return this.http.get(PATH4, { params });
  }
};

// src/video/resources/signingKeys.ts
var PATH5 = "/video/v1/signing-keys";
var buildBasePath5 = (keyId) => `${PATH5}/${keyId}`;
var SigningKeys = class extends Base {
  /**
   * Creates a new Signing Key that can be used with the JWT module to sign URLs.
   * @extends Base
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const muxClient = new Mux(accessToken, secret);
   * const { Video } = muxClient;
   *
   * // Create a new signing key
   * Video.SigningKeys.create();
   *
   * @see https://docs.mux.com/api-reference/video#operation/create-url-signing-key
   */
  create() {
    return this.http.post(PATH5, {});
  }
  /**
   * Get a signing key. *Note* The private key is _not_ returned.
   * @param {string} keyId - The ID for the signing key
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Get a signing key
   * Video.SigningKeys.get(keyId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/get-url-signing-key
   */
  get(keyId) {
    if (!keyId) {
      return Promise.reject(new Error("An signing key ID is required."));
    }
    return this.http.get(buildBasePath5(keyId));
  }
  /**
   * Delete a signing key
   * @param {string} keyId - The ID for the signing key
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // Delete a signing key
   * Video.SigningKeys.del(keyId);
   *
   * @see https://docs.mux.com/api-reference/video#operation/delete-url-signing-key
   */
  del(keyId) {
    if (!keyId) {
      return Promise.reject(new Error("An signing key ID is required."));
    }
    return this.http.delete(buildBasePath5(keyId));
  }
  /**
   * List signing keys
   * @param {string} keyId - The ID for the signing key
   * @param {object} params - Object to include as query params
   * @param {number} params.limit - Number of signing keys to return in the response
   * @param {number} params.page - Page of signing keys to return (limit * page)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // List all signing keys
   * Video.SigningKeys.list();
   *
   * @see https://docs.mux.com/api-reference/video#operation/list-url-signing-keys
   */
  list(params = {}) {
    return this.http.get(PATH5, { params });
  }
};

// src/video/resources/deliveryUsage.ts
var PATH6 = "/video/v1/delivery-usage";
var DeliveryUsage = class extends Base {
  /**
   * List all delivery usage during a timeframe for a Mux Environment (tied to your access token)
   * @param {Object} params - Request JSON parameters (e.g timeframe)
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const { Video } = new Mux(accessToken, secret);
   *
   * // List all delivery usage for a Mux Environment within a timeframe
   * Video.DeliveryUsage.list({timeframe: [1574076240, 1573471440]});
   *
   * @see https://docs.mux.com/api-reference/video#operation/list-delivery-usage
   */
  list(params) {
    return this.http.get(PATH6, { params });
  }
};

// src/video/resources/playbackRestrictions.ts
var PATH7 = "/video/v1/playback-restrictions";
var buildBasePath6 = (restrictionId) => `${PATH7}/${restrictionId}`;
var PlaybackRestrictions = class extends Base {
  create(restriction) {
    return this.http.post(PATH7, restriction);
  }
  list() {
    return this.http.get(PATH7);
  }
  get(restrictionId) {
    return this.http.get(buildBasePath6(restrictionId));
  }
  delete(restrictionId) {
    return this.http.delete(buildBasePath6(restrictionId));
  }
  putReferrer(restrictionId, referrer) {
    return this.http.put(`${buildBasePath6(restrictionId)}/referrer`, referrer);
  }
};

// src/video/resources/spaces.ts
var BASE_PATH = "/video/v1/spaces";
var SPACE_PATH = (spaceId) => `${BASE_PATH}/${spaceId}`;
var BROADCAST_PATH = (spaceId, broadcastId) => `${SPACE_PATH(spaceId)}/broadcasts/${broadcastId}`;
var Broadcasts = class extends Base {
  create(spaceId, request) {
    return this.http.post(`${SPACE_PATH(spaceId)}/broadcasts`, request);
  }
  get(spaceId, broadcastId) {
    return this.http.get(BROADCAST_PATH(spaceId, broadcastId));
  }
  delete(spaceId, broadcastId) {
    return this.http.delete(BROADCAST_PATH(spaceId, broadcastId));
  }
  start(spaceId, broadcastId) {
    return this.http.post(`${BROADCAST_PATH(spaceId, broadcastId)}/start`);
  }
  stop(spaceId, broadcastId) {
    return this.http.post(`${BROADCAST_PATH(spaceId, broadcastId)}/stop`);
  }
};
var Spaces = class extends Base {
  constructor(accessTokenOrConfigOrBase, secret, config) {
    var __super = (...args) => {
      super(...args);
    };
    if (accessTokenOrConfigOrBase instanceof Base) {
      __super(accessTokenOrConfigOrBase);
    } else if (typeof accessTokenOrConfigOrBase === "object") {
      __super(accessTokenOrConfigOrBase);
    } else {
      __super(accessTokenOrConfigOrBase, secret, config ?? {});
    }
    this.Broadcasts = new Broadcasts(this);
  }
  create(req) {
    return this.http.post(BASE_PATH, req);
  }
  list(params) {
    return this.http.get(BASE_PATH, { params });
  }
  get(spaceId) {
    return this.http.get(SPACE_PATH(spaceId));
  }
  delete(spaceId) {
    return this.http.delete(SPACE_PATH(spaceId));
  }
};

// src/video/resources/transcriptionVocabularies.ts
var PATH8 = "/video/v1/transcription-vocabularies";
var buildBasePath7 = (transcriptionVocabularyId) => `${PATH8}/${transcriptionVocabularyId}`;
var TranscriptionVocabularies = class extends Base {
  create(transcriptionVocabulary) {
    return this.http.post(PATH8, transcriptionVocabulary);
  }
  list() {
    return this.http.get(PATH8);
  }
  get(transcriptionVocabularyId) {
    return this.http.get(buildBasePath7(transcriptionVocabularyId));
  }
  delete(transcriptionVocabularyId) {
    return this.http.delete(buildBasePath7(transcriptionVocabularyId));
  }
  update(transcriptionVocabularyId, transcriptionVocabulary) {
    return this.http.put(
      `${buildBasePath7(transcriptionVocabularyId)}`,
      transcriptionVocabulary
    );
  }
};

// src/video/video.ts
var Video = class extends Base {
  constructor(accessTokenOrConfigOrBase, secret, config) {
    var __super = (...args) => {
      super(...args);
    };
    if (accessTokenOrConfigOrBase instanceof Base) {
      __super(accessTokenOrConfigOrBase);
    } else if (typeof accessTokenOrConfigOrBase === "object") {
      __super(accessTokenOrConfigOrBase);
    } else {
      __super(accessTokenOrConfigOrBase, secret, config);
    }
    this.Assets = new Assets(this);
    this.LiveStreams = new LiveStreams(this);
    this.PlaybackIds = new PlaybackIds(this);
    this.Uploads = new Uploads(this);
    this.SigningKeys = new SigningKeys(this);
    this.DeliveryUsage = new DeliveryUsage(this);
    this.PlaybackRestrictions = new PlaybackRestrictions(this);
    this.Spaces = new Spaces(this);
    this.TranscriptionVocabularies = new TranscriptionVocabularies(this);
  }
};
export {
  Video
};
/*!
 * Mux Assets
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Live Streams
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Signing Keys
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux DeliveryUsage
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Video
 * Copyright(c) 2022 Mux Inc.
 */
//# sourceMappingURL=video.mjs.map