// src/base.ts
import Axios from "axios";
import EventEmitter from "events";

// src/version.ts
var VERSION = "7.3.5";

// src/base.ts
var Base = class extends EventEmitter {
  constructor(tokenIdOrOptionsOrBase, tokenSecret, config) {
    var _a, _b, _c, _d, _e, _f, _g;
    super();
    if (tokenIdOrOptionsOrBase instanceof Base) {
      this.config = tokenIdOrOptionsOrBase._config;
      this._tokenId = tokenIdOrOptionsOrBase._tokenId;
      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;
      this.http = tokenIdOrOptionsOrBase.http;
    } else {
      if (typeof tokenIdOrOptionsOrBase === "object" && !(tokenIdOrOptionsOrBase instanceof Base)) {
        this.config = tokenIdOrOptionsOrBase;
        this.tokenId = void 0;
        this.tokenSecret = void 0;
      } else {
        this.tokenId = tokenIdOrOptionsOrBase;
        this.tokenSecret = tokenSecret;
        this.config = config ?? {};
      }
      const request = {
        baseURL: this.config.baseUrl,
        headers: {
          "User-Agent": `Mux Node | ${VERSION}`,
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        withCredentials: false,
        auth: {
          username: this._tokenId,
          password: this._tokenSecret
        }
      };
      if ((_a = this.config.platform) == null ? void 0 : _a.name) {
        if ((_c = (_b = this.config.platform) == null ? void 0 : _b.name) == null ? void 0 : _c.includes("|")) {
          throw new Error('Platform name cannot contain a "|" value.');
        }
        if ((_e = (_d = this.config.platform) == null ? void 0 : _d.version) == null ? void 0 : _e.includes("|")) {
          throw new Error('Platform version cannot contain a "|" value.');
        }
        request.headers["x-source-platform"] = `${(_f = this.config.platform) == null ? void 0 : _f.name} | ${(_g = this.config.platform) == null ? void 0 : _g.version}`;
      }
      this.http = Axios.create(request);
      this.http.interceptors.request.use((req) => {
        this.emit("request", req);
        return req;
      });
      this.http.interceptors.response.use(
        (res) => {
          this.emit("response", res);
          if (res.config.url && this.isVideoUrl(res.config.url)) {
            return res.data && res.data.data;
          }
          return res.data;
        },
        (errorRes) => Promise.reject(
          errorRes.response && errorRes.response.data.error || errorRes
        )
      );
    }
  }
  // eslint-disable-next-line class-methods-use-this
  isVideoUrl(url) {
    return url.startsWith(`/video/v1/`);
  }
  set config(options) {
    this._config = {
      baseUrl: "https://api.mux.com",
      ...options
    };
  }
  get config() {
    return this._config;
  }
  set tokenId(token) {
    const v = token || process.env.MUX_TOKEN_ID;
    if (!v || v.length === 0) {
      throw new Error("API Access Token must be provided.");
    }
    this._tokenId = v;
  }
  get tokenId() {
    return this._tokenId;
  }
  set tokenSecret(secret) {
    const v = secret || process.env.MUX_TOKEN_SECRET;
    if (!v || v.length === 0) {
      throw new Error("API secret key must be provided");
    }
    this._tokenSecret = v;
  }
  get tokenSecret() {
    return this._tokenSecret;
  }
};

// src/data/resources/real_time.ts
var PATH = "/data/v1/realtime";
var RealTime = class extends Base {
  /**
   * List of available real-time dimensions
   *
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const muxClient = new Mux(accessToken, secret);
   * const { Data } = muxClient;
   *
   * // Returns a list of available real-time dimensions
   * Data.RealTime.dimensions();
   *
   * @see https://docs.mux.com/api-reference/data#operation/list-realtime-dimensions
   *
   * @deprecated The method should not be used, you should use Monitoring.dimensions() instead
   */
  dimensions() {
    return this.http.get(`${PATH}/dimensions`);
  }
  /**
   * List available real-time metrics
   *
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const muxClient = new Mux(accessToken, secret);
   * const { Data } = muxClient;
   *
   * // Returns a list of available real-time metrics
   * Data.RealTime.metrics();
   *
   * @see https://docs.mux.com/api-reference/data#operation/list-realtime-metrics
   *
   * @deprecated The method should not be used, you should use Monitoring.metrics() instead
   */
  metrics() {
    return this.http.get(`${PATH}/metrics`);
  }
  /**
   * Get breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.
   *
   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids
   * @param {Object} params - example { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] }
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const muxClient = new Mux(accessToken, secret);
   * const { Data } = muxClient;
   *
   * // List the breakdown information for current-concurrent-viewers by ASN for a specific time for the Windows operating system in the US
   * Data.RealTime.breakdown('current-concurrent-viewers', { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] });
   *
   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-breakdown
   *
   * @deprecated The method should not be used, you should use Monitoring.breakdown() instead
   */
  breakdown(metricId, params) {
    if (!metricId) {
      throw new Error(
        "A metric Id is required for real-time breakdown information"
      );
    }
    if (!params || params && !params.dimension) {
      throw new Error(
        "The dimension query parameter is required for real-time breakdown information"
      );
    }
    return this.http.get(`${PATH}/metrics/${metricId}/breakdown`, { params });
  }
  /**
   * List histogram timeseries information for a specific metric
   *
   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids
   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const muxClient = new Mux(accessToken, secret);
   * const { Data } = muxClient;
   *
   * // List histogram timeseries information for video-startup-time for the Windows operating system in the US
   * Data.RealTime.histogramTimeseries('video-startup-time', { filters: ['operating_system:windows', 'country:US'] });
   *
   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-histogram-timeseries
   *
   * @deprecated The method should not be used, you should use Monitoring.histogramTimeseries() instead
   */
  histogramTimeseries(metricId, params) {
    if (!metricId) {
      throw new Error(
        "A metric Id is required for real-time histogram timeseries information"
      );
    }
    return this.http.get(`${PATH}/metrics/${metricId}/histogram-timeseries`, {
      params
    });
  }
  /**
   * List timeseries information for a specific metric along with the number of concurrent viewers.
   *
   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids
   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }
   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API
   *
   * @example
   * const muxClient = new Mux(accessToken, secret);
   * const { Data } = muxClient;
   *
   * // List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US
   * Data.RealTime.timeseries('playback-failure-percentage', { filters: ['operating_system:windows', 'country:US'] });
   *
   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-timeseries
   *
   * @deprecated The method should not be used, you should use Monitoring.timeseries() instead
   */
  timeseries(metricId, params) {
    if (!metricId) {
      throw new Error(
        "A metric Id is required for real-time timeseries information."
      );
    }
    return this.http.get(`${PATH}/metrics/${metricId}/timeseries`, {
      params
    });
  }
};
export {
  RealTime
};
/*!
 * Mux Real-Time
 * Copyright(c) 2020 Mux Inc.
 */
//# sourceMappingURL=real_time.mjs.map